[project]
name = "sentiment-analysis-classifier"
version = "0.1.0"
description = "Sentiment Analysis Classifier using ML"
authors = [
    {name = "Developer"}
]
readme = "README.md"
requires-python = ">=3.11,<3.14"
dependencies = [
    "torch>=2.8.0,<3.0.0",
    "transformers>=4.56.0,<5.0.0",
    "streamlit>=1.49.1,<2.0.0",
    "fastapi>=0.116.1,<0.117.0",
    "structlog>=25.4.0,<26.0.0",
    "uvicorn[standard]>=0.32.0,<0.33.0",
    "pydantic>=2.11.0,<3.0.0",
    "python-multipart>=0.0.9,<0.1.0",
    "plotly>=5.18.0,<6.0.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0,<9.0.0",
    "pytest-cov>=6.0.0,<7.0.0",
    "pytest-asyncio>=0.24.0,<0.25.0",
    "pytest-mock>=3.14.0,<4.0.0",
    "black>=24.0.0,<25.0.0",
    "flake8>=7.0.0,<8.0.0",
    "mypy>=1.12.0,<2.0.0",
    "pre-commit>=4.0.0,<5.0.0"
]
test = [
    "pytest>=8.0.0,<9.0.0",
    "pytest-cov>=6.0.0,<7.0.0",
    "pytest-asyncio>=0.24.0,<0.25.0",
    "pytest-mock>=3.14.0,<4.0.0",
    "httpx>=0.28.0,<0.29.0",
    "playwright>=1.48.0,<2.0.0"
]

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "sentiment-analysis-classifier"
version = "0.1.0"
description = "Sentiment Analysis Classifier using ML"
authors = ["Developer"]
readme = "README.md"
packages = [
    {include = "apps"},
    {include = "packages"}
]

[tool.poetry.dependencies]
python = ">=3.11,<3.14"
torch = ">=2.8.0,<3.0.0"
transformers = ">=4.56.0,<5.0.0"
streamlit = ">=1.49.1,<2.0.0"
fastapi = ">=0.116.1,<0.117.0"
structlog = ">=25.4.0,<26.0.0"
uvicorn = {extras = ["standard"], version = ">=0.32.0,<0.33.0"}
pydantic = ">=2.11.0,<3.0.0"
python-multipart = ">=0.0.9,<0.1.0"
click = ">=8.1.0,<9.0.0"
plotly = ">=5.18.0,<6.0.0"

[tool.poetry.group.dev.dependencies]
pytest = ">=8.0.0,<9.0.0"
pytest-cov = ">=6.0.0,<7.0.0"
pytest-asyncio = ">=0.24.0,<0.25.0"
pytest-mock = ">=3.14.0,<4.0.0"
black = ">=24.0.0,<25.0.0"
flake8 = ">=7.0.0,<8.0.0"
mypy = ">=1.12.0,<2.0.0"
pre-commit = ">=4.0.0,<5.0.0"

[tool.poetry.group.test.dependencies]
pytest = ">=8.0.0,<9.0.0"
pytest-cov = ">=6.0.0,<7.0.0"
pytest-asyncio = ">=0.24.0,<0.25.0"
pytest-mock = ">=3.14.0,<4.0.0"
httpx = ">=0.28.0,<0.29.0"
playwright = ">=1.48.0,<2.0.0"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests"
]
